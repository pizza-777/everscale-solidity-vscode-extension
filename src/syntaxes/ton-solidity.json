{
    "fileTypes": [
        "sol"
    ],
    "name": "ton-solidity",
    "patterns": [
        {
            "include": "#natspec"
        },
        {
            "include": "#comment"
        },
        {
            "include": "#operator"
        },
        {
            "include": "#global"
        },
        {
            "include": "#control"
        },
        {
            "include": "#constant"
        },
        {
            "include": "#primitive"
        },
        {
            "include": "#type-primitive"
        },
        {
            "include": "#type-modifier-extended-scope"
        },
        {
            "include": "#declaration"
        },
        {
            "include": "#function-type"
        },
        {
            "include": "#function-call"
        },
        {
            "include": "#assembly"
        },
        {
            "include": "#punctuation"
        }
    ],
    "repository": {
        "natspec": {
            "patterns": [
                {
                    "begin": "/\\*\\*",
                    "end": "\\*/",
                    "name": "comment.block.documentation",
                    "patterns": [
                        {
                            "include": "#natspec-tags"
                        }
                    ]
                },
                {
                    "begin": "///",
                    "end": "$",
                    "name": "comment.block.documentation",
                    "patterns": [
                        {
                            "include": "#natspec-tags"
                        }
                    ]
                }
            ]
        },
        "natspec-tags": {
            "patterns": [
                {
                    "include": "#comment-todo"
                },
                {
                    "include": "#natspec-tag-title"
                },
                {
                    "include": "#natspec-tag-author"
                },
                {
                    "include": "#natspec-tag-notice"
                },
                {
                    "include": "#natspec-tag-dev"
                },
                {
                    "include": "#natspec-tag-param"
                },
                {
                    "include": "#natspec-tag-return"
                }
            ]
        },
        "natspec-tag-title": {
            "match": "(@title)\\b",
            "name": "storage.type.title.natspec"
        },
        "natspec-tag-author": {
            "match": "(@author)\\b",
            "name": "storage.type.author.natspec"
        },
        "natspec-tag-notice": {
            "match": "(@notice)\\b",
            "name": "storage.type.dev.natspec"
        },
        "natspec-tag-dev": {
            "match": "(@dev)\\b",
            "name": "storage.type.dev.natspec"
        },
        "natspec-tag-param": {
            "match": "(@param)(\\s+([A-Za-z_\\d]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.param.natspec"
                },
                "3": {
                    "name": "variable.other.natspec"
                }
            }
        },
        "natspec-tag-return": {
            "match": "(@return)\\b",
            "name": "storage.type.return.natspec"
        },
        "comment": {
            "patterns": [
                {
                    "include": "#comment-line"
                },
                {
                    "include": "#comment-block"
                }
            ]
        },
        "comment-todo": {
            "match": "(?i)\\b(FIXME|TODO|CHANGED|XXX|IDEA|HACK|NOTE|REVIEW|NB|BUG|QUESTION|COMBAK|TEMP|SUPPRESS|LINT|\\w+-disable|\\w+-suppress)\\b(?-i)",
            "name": "keyword.comment.todo"
        },
        "comment-line": {
            "begin": "(?<!tp:)//",
            "end": "$",
            "name": "comment.line",
            "patterns": [
                {
                    "include": "#comment-todo"
                }
            ]
        },
        "comment-block": {
            "begin": "/\\*",
            "end": "\\*/",
            "name": "comment.block",
            "patterns": [
                {
                    "include": "#comment-todo"
                }
            ]
        },
        "operator": {
            "patterns": [
                {
                    "include": "#operator-logic"
                },
                {
                    "include": "#operator-mapping"
                },
                {
                    "include": "#operator-arithmetic"
                },
                {
                    "include": "#operator-binary"
                },
                {
                    "include": "#operator-assignment"
                }
            ]
        },
        "operator-logic": {
            "match": "(\\!=|==|<(?!<)|<=|>(?!>)|>=|\\&\\&|\\|\\||\\:(?!=)|\\?)",
            "name": "keyword.operator.logic"
        },
        "operator-mapping": {
            "match": "(=>)",
            "name": "keyword.operator.mapping"
        },
        "operator-arithmetic": {
            "match": "(\\+|\\-|\\/|\\*)",
            "name": "keyword.operator.arithmetic"
        },
        "operator-binary": {
            "match": "(\\^|\\&|\\||<<|>>)",
            "name": "keyword.operator.binary"
        },
        "operator-assignment": {
            "match": "(\\:?=)",
            "name": "keyword.operator.assignment"
        },
        "control": {
            "patterns": [
                {
                    "include": "#control-flow"
                },
                {
                    "include": "#control-using"
                },
                {
                    "include": "#control-import"
                },
                {
                    "include": "#control-pragma"
                },
                {
                    "include": "#control-underscore"
                },
                {
                    "include": "#control-unchecked"
                },
                {
                    "include": "#control-other"
                }
            ]
        },
        "control-flow": {
            "patterns": [
                {
                    "match": "\\b(if|else|for|while|do|break|continue|try|catch|finally|throw|return)\\b",
                    "name": "keyword.control.flow"
                },
                {
                    "begin": "\\b(returns)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.flow.return"
                        }
                    },
                    "end": "(?=\\))",
                    "patterns": [
                        {
                            "include": "#declaration-function-parameters"
                        }
                    ]
                }
            ]
        },
        "control-using": {
            "patterns": [
                {
                    "match": "\\b(using)\\b\\s+\\b([A-Za-z\\d_]+)\\b\\s+\\b(for)\\b\\s+\\b([A-Za-z\\d_]+)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.using"
                        },
                        "2": {
                            "name": "entity.name.library"
                        },
                        "3": {
                            "name": "keyword.control.for"
                        },
                        "4": {
                            "name": "entity.name"
                        }
                    }
                },
                {
                    "match": "\\b(using)\\b",
                    "name": "keyword.control.using"
                }
            ]
        },
        "control-import": {
            "patterns": [
                {
                    "begin": "\\b(import)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.import"
                        }
                    },
                    "end": "(?=\\;)",
                    "patterns": [
                        {
                            "begin": "((?=\\{))",
                            "end": "((?=\\}))",
                            "patterns": [
                                {
                                    "match": "\\b(\\w+)\\b",
                                    "name": "entity.name.interface"
                                }
                            ]
                        },
                        {
                            "match": "\\b(from)\\b",
                            "name": "keyword.control.import.from"
                        },
                        {
                            "include": "#string"
                        },
                        {
                            "include": "#punctuation"
                        }
                    ]
                },
                {
                    "match": "\\b(import)\\b",
                    "name": "keyword.control.import"
                }
            ]
        },
        "control-unchecked": {
            "match": "\\b(unchecked)\\b",
            "name": "keyword.control.unchecked"
        },
        "control-pragma": {
            "patterns": [
                {
                    "match": "(pragma) (msgValue|AbiHeader|solidity|ton-solidity|experimental)\\s?([0-9a-zA-Z_\\.\\s\\~|^<>=]+)?\\s?(;)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.pragma"
                        },
                        "2": {
                            "name": "entity.name.tag.pragma"
                        },
                        "3": {
                            "name": "constant.numeric"
                        },
                        "4": {
                            "name": "punctuation.terminator.statement"
                        }
                    }
                },
                {
                    "match": "(pragma) (ignoreIntOverflow)(;)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.pragma"
                        },
                        "2": {
                            "name": "entity.name.tag.pragma"
                        },
                        "3": {
                            "name": "punctuation.terminator.statement"
                        }
                    }
                }
            ]
        },
        "control-underscore": {
            "match": "\\b(_)\\b",
            "name": "constant.other.underscore"
        },
        "control-other": {
            "match": "\\b(new|delete|emit)\\b",
            "name": "keyword.control"
        },
        "constant": {
            "patterns": [
                {
                    "include": "#constant-boolean"
                },
                {
                    "include": "#constant-time"
                },
                {
                    "include": "#constant-currency"
                }
            ]
        },
        "constant-boolean": {
            "match": "\\b(true|false)\\b",
            "name": "constant.language.boolean"
        },
        "constant-time": {
            "match": "\\b(seconds|minutes|hours|days|weeks|years|now)\\b",
            "name": "constant.language.time"
        },
        "constant-currency": {
            "match": "\\b(nano|nanoton|Ton|nTon|ton|micro|microton|milli|milliton|kiloton|kTon|megaton|MTon|gigaton|GTon|nanoever|Ever|ever|micro|microever|milli|milliever|kiloever|kEver|megaever|MEver|gigaever|GEver)\\b",
            "name": "constant.language.currency"
        },
        "number": {
            "patterns": [
                {
                    "include": "#number-decimal"
                },
                {
                    "include": "#number-hex"
                },
                {
                    "include": "#number-scientific"
                }
            ]
        },
        "number-decimal": {
            "match": "\\b([0-9_]+(\\.[0-9_]+)?)\\b",
            "name": "constant.numeric.decimal"
        },
        "number-hex": {
            "match": "\\b(0[xX][a-fA-F0-9]+)\\b",
            "name": "constant.numeric.hexadecimal"
        },
        "number-scientific": {
            "match": "\\b(?:0\\.(?:0[1-9]|[1-9][0-9_]?)|[1-9][0-9_]*(?:\\.\\d{1,2})?)(?:e[+-]?[0-9_]+)?",
            "name": "constant.numeric.scientific"
        },
        "string": {
            "patterns": [
                {
                    "match": "\\\".*?\\\"",
                    "name": "string.quoted.double"
                },
                {
                    "match": "\\'.*?\\'",
                    "name": "string.quoted.single"
                }
            ]
        },
        "primitive": {
            "patterns": [
                {
                    "include": "#number-decimal"
                },
                {
                    "include": "#number-hex"
                },
                {
                    "include": "#number-scientific"
                },
                {
                    "include": "#string"
                }
            ]
        },
        "type-primitive": {
            "patterns": [
                {
                    "match": "\\b(emptyMap|TvmCell|TvmSlice|TvmBuilder|ExtraCurrencyCollection|address|array|vector|Type|string\\d*|bytes\\d*|bytes|byte|int\\d*|varInt\\d*|uint\\d*|varUint\\d*|bool|hash\\d*)\\b",
                    "captures": {
                        "1": {
                            "name": "support.type.primitive"
                        }
                    }
                }
            ]
        },
        "global": {
            "patterns": [
                {
                    "include": "#global-variables"
                },
                {
                    "include": "#global-functions"
                }
            ]
        },
        "global-variables": {
            "patterns": [
                {
                    "match": "\\b(this)\\b",
                    "name": "variable.language.this"
                },
                {
                    "match": "\\b(super)\\b",
                    "name": "variable.language.super"
                },
                {
                    "match": "\\b(msg)\\.(pubkey)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.class"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(msg)\\.(data|sender|value|currencies|isInternal|isExternal|isTickTock)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.class"
                        },
                        "2": {
                            "name": "support.type.primitive"
                        }
                    }
                },
                {
                    "match": "\\b(msg)\\.(createdAt)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.class"
                        },
                        "2": {
                            "name": "constant.language.time"
                        }
                    }
                },
                {
                    "match": "\\b(tx)\\.(currencies)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.class"
                        },
                        "2": {
                            "name": "constant.language.currency"
                        }
                    }
                },
                {
                    "match": "\\b(tvm)\\.(accept|setGasLimit|pubkey|setPubkey|hash|getData|log|hexdump|bindump|configParam|rawConfigParam|rawReserve|checkSign|insertPubkey|functionId|encodeBody|exit|exit1|buildExtMsg|buildIntMsg|sendrawmsg)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.class"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(abi)\\.(encode|decode)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.class"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },                
                {
                    "match": "\\b(abi)\\b",
                    "name": "variable.language.builtin.abi"
                },
                {
                    "match": "\\b(tvm)\\.(stateInitHash|rawCommit|commit|setcode|setCurrentCode|resetStorage|setData|buildStateInit|buildDataInit|buildEmptyData|deploy|code|codeSalt|setCodeSalt)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.class"
                        },
                        "2": {
                            "name": "storage.type.function"
                        }
                    }
                },
                {
                    "match": "\\b(address)\\.(makeAddrStd)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.class"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(math)\\.(minmax|min|max|abs|modpow2|divc|divr|muldiv|muldivr|muldivc|muldivmod|divmod|sign)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.class"
                        },
                        "2": {
                            "name": "support.function.math"
                        }
                    }
                },
                {
                    "match": "\\b(tx|block)\\.(timestamp)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.class"
                        },
                        "2": {
                            "name": "constant.language.time"
                        }
                    }
                },
                {
                    "match": "\\b(rnd)\\.(next|getSeed|setSeed|shuffle)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.class"
                        },
                        "2": {
                            "name": "support.function.math"
                        }
                    }
                },
                {
                    "match": "\\.(getSet|getAdd|getReplace|nextOrEq|prevOrEq|depth|dataSizeQ|toSlicee|empty|size|dataSize|depth|hasNBits|hasNRefs|hasNBitsAndRefs|compare|loadRef|loadRefAsSlice|loadSigned|loadUnsigned|loadTons|loadSlice|decodeFunctionParams|skip|toSlice|toCell|remBitsAndRefs|unpack|length|append|byteLength|substr|findLast|find|decode|storeOnes|storeZeroes|storeSigned|storeUnsigned|storeRef|storeTons|min|next|prev|nextOrEq|prevOrEq|delMin|delMax|fetch|exists|empty|replace|add|hasValue|makeAddrNone|makeAddrExtern|getType|max|store|transfer|bitsAndRefs|remBits|remRefs|refs|bits)",
                    "captures": {
                        "1": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\.(currencies|balance|lenght|extMsg)",
                    "captures": {
                        "1": {
                            "name": "support.variable.property"
                        }
                    }
                }
            ]
        },
        "global-functions": {
            "patterns": [
                {
                    "match": "\\b(require|assert|revert)\\b",
                    "name": "keyword.control.exceptions"
                },
                {
                    "match": "\\b(selfdestruct|suicide|fallback|receive|onBounce|onTickTock|constructor)\\b",
                    "name": "keyword.control.contract"
                },
                {
                    "match": "\\b(ubitSize|bitSize|sha256|sha3|ripemd160|ecrecover)\\b",
                    "name": "support.function.math"
                },
                {
                    "match": "\\b(unicode|format|stoi|gasToValue|valueToGas|optional|repeat|QueryOrderBy)\\b",
                    "name": "support.function.string"
                },
                {
                    "match": "\\b(logtvm)\\b",
                    "name": "entity.name.function"
                },
                {
                    "match": "\\b(blockhash|gasleft)\\b",
                    "name": "variable.language.transaction"
                },
                {
                    "match": "\\b(type)\\b",
                    "name": "variable.language.type"
                },
                {
                    "match": "\\b(functionID)\\b",
                    "name": "keyword.control"
                }
            ]
        },
        "type-modifier-access": {
            "match": "\\b(internal|external|private|public|inline|externalMsg|internalMsg|responsible)\\b",
            "name": "entity.name.function.modifier"
        },
        "type-modifier-payable": {
            "match": "\\b(nonpayable|payable)\\b",
            "name": "storage.modifier.payable"
        },
        "type-modifier-constant": {
            "match": "\\b(constant|static)\\b",
            "name": "storage.modifier.readonly"
        },
        "type-modifier-immutable": {
            "match": "\\b(immutable)\\b",
            "name": "storage.modifier.readonly"
        },
        "type-modifier-extended-scope": {
            "match": "\\b(pure|view|inherited|indexed|storage|memory|virtual|calldata|override|abstract)\\b",
            "name": "storage.modifier.extendedscope"
        },
        "variable": {
            "patterns": [
                {
                    "include": "#function-type"
                },
                {
                    "match": "\\b(\\_\\w+)\\b",
                    "captures": {
                        "1": {
                            "name": "variable.parameter.function"
                        }
                    }
                },
                {
                    "match": "(?:\\.)(\\w+)\\b",
                    "captures": {
                        "1": {
                            "name": "support.variable.property"
                        }
                    }
                },
                {
                    "match": "\\b(\\w+)\\b",
                    "captures": {
                        "1": {
                            "name": "variable.parameter.other"
                        }
                    }
                }
            ]
        },
        "modifier-call": {
            "patterns": [
                {
                    "include": "#function-call"
                }
            ]
        },
        "declaration": {
            "patterns": [
                {
                    "include": "#declaration-contract"
                },
                {
                    "include": "#declaration-interface"
                },
                {
                    "include": "#declaration-library"
                },
                {
                    "include": "#declaration-function"
                },
                {
                    "include": "#declaration-modifier"
                },
                {
                    "include": "#declaration-constructor"
                },
                {
                    "include": "#declaration-event"
                },
                {
                    "include": "#declaration-storage"
                },
                {
                    "include": "#declaration-debot-interface"
                },
                {
                    "include": "#declaration-error"
                }
            ]
        },
        "declaration-storage-field": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#control"
                },
                {
                    "include": "#type-primitive"
                },
                {
                    "include": "#type-modifier-access"
                },
                {
                    "include": "#type-modifier-immutable"
                },
                {
                    "include": "#type-modifier-extend-scope"
                },
                {
                    "include": "#type-modifier-payable"
                },
                {
                    "include": "#type-modifier-constant"
                },
                {
                    "include": "#primitive"
                },
                {
                    "include": "#constant"
                },
                {
                    "include": "#operator"
                },
                {
                    "include": "#punctuation"
                }
            ]
        },
        "declaration-storage": {
            "patterns": [
                {
                    "include": "#declaration-storage-mapping"
                },
                {
                    "include": "#declaration-struct"
                },
                {
                    "include": "#declaration-enum"
                },
                {
                    "include": "#declaration-storage-field"
                }
            ]
        },
        "declaration-contract": {
            "patterns": [               
                {
                    "begin": "\\b(contract)\\b\\s+(\\w+)\\b\\s+\\b(is)\\b\\s+",
                    "end": "(?=\\{)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.contract"
                        },
                        "2": {
                            "name": "entity.name.type.contract"
                        },
                        "3": {
                            "name": "storage.modifier.is"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\b(\\w+)\\b",
                            "name": "entity.name.type.contract.extend"
                        }
                    ]
                },
                {
                    "begin": "\\b(contract)\\b\\s+(\\w+)\\b\\s*",
                    "end": "(?=\\{)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.contract"
                        },
                        "2": {
                            "name": "entity.name.type.contract"
                        }
                    }
                }
            ]
        },
        "declaration-interface": {
            "patterns": [
                {
                    "match": "\\b(interface)\\b\\s+(\\w+)\\b\\s*(?=\\{)",
                    "captures": {
                        "1": {
                            "name": "storage.type.interface"
                        },
                        "2": {
                            "name": "entity.name.interface"
                        }
                    }
                },
                {
                    "begin": "\\b(interface)\\b\\s+(\\w+)\\b\\s+",
                    "end": "(?=\\{)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.interface"
                        },
                        "2": {
                            "name": "entity.name.interface"
                        },
                        "3": {
                            "name": "storage.modifier.is"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\b(\\w+)\\b",
                            "name": "entity.name.interface.extend"
                        }
                    ]
                },
                {
                    "begin": "\\b(interface)\\b\\s+(\\w+)\\b\\s+\\b(is)\\b\\s+",
                    "end": "(?=\\{)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.interface"
                        },
                        "2": {
                            "name": "entity.name.interface"
                        },
                        "3": {
                            "name": "storage.modifier.is"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\b(\\w+)\\b",
                            "name": "entity.name.interface.extend"
                        }
                    ]
                }
            ]
        },
        "declaration-library": {
            "match": "\\b(library)(\\s+([A-Za-z_\\d]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.library"
                },
                "3": {
                    "name": "entity.name.library"
                }
            }
        },
        "declaration-struct": {
            "patterns": [
                {
                    "match": "\\b(struct)(\\s+([A-Za-z_\\d]\\w*))?\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.struct"
                        },
                        "3": {
                            "name": "entity.name.struct"
                        }
                    }
                },
                {
                    "begin": "\\b(struct)\\b\\s*(\\w+)?\\b\\s*(?=\\{)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.struct"
                        },
                        "2": {
                            "name": "entity.name.struct"
                        }
                    },
                    "end": "(?=\\})",
                    "patterns": [
                        {
                            "include": "#type-primitive"
                        },
                        {
                            "include": "#variable"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#comment"
                        }
                    ]
                }
            ]
        },
        "declaration-event": {
            "patterns": [
                {
                    "begin": "\\b(event)\\b(?:\\s+(\\w+)\\b)?",
                    "end": "(?=\\))",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.event"
                        },
                        "2": {
                            "name": "entity.name.event"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type-primitive"
                        },
                        {
                            "match": "\\b(?:(indexed)\\s)?(\\w+)(?:,\\s*|)",
                            "captures": {
                                "1": {
                                    "name": "storage.modifier.indexed"
                                },
                                "2": {
                                    "name": "variable.parameter.event"
                                }
                            }
                        },
                        {
                            "include": "#punctuation"
                        }
                    ]
                },
                {
                    "match": "\\b(event)(\\s+([A-Za-z_\\d]\\w*))?\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.event"
                        },
                        "3": {
                            "name": "entity.name.event"
                        }
                    }
                }
            ]
        },
        "declaration-constructor": {
            "patterns": [
                {
                    "begin": "\\b(constructor)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.constructor"
                        }
                    },
                    "end": "(?=\\{)",
                    "patterns": [
                        {
                            "begin": "\\G\\s*(?=\\()",
                            "end": "(?=\\))",
                            "patterns": [
                                {
                                    "include": "#declaration-function-parameters"
                                }
                            ]
                        },
                        {
                            "begin": "(?<=\\))",
                            "end": "(?=\\{)",
                            "patterns": [
                                {
                                    "include": "#type-modifier-access"
                                },
                                {
                                    "include": "#function-call"
                                }
                            ]
                        }
                    ]
                },
                {
                    "match": "\\b(constructor)\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.constructor"
                        }
                    }
                }
            ]
        },
        "declaration-enum": {
            "patterns": [
                {
                    "begin": "\\b(enum)\\s+(\\w+)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.enum"
                        },
                        "2": {
                            "name": "entity.name.enum"
                        }
                    },
                    "end": "(?=\\})",
                    "patterns": [
                        {
                            "match": "\\b(\\w+)\\b",
                            "name": "variable.other.enummember"
                        },
                        {
                            "include": "#punctuation"
                        }
                    ]
                },
                {
                    "match": "\\b(enum)(\\s+([A-Za-z_\\d]\\w*))?\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.enum"
                        },
                        "3": {
                            "name": "entity.name.enum"
                        }
                    }
                }
            ]
        },
        "declaration-function-parameters": {
            "begin": "\\G\\s*(?=\\()",
            "end": "(?=\\))",
            "patterns": [
                {
                    "include": "#type-primitive"
                },
                {
                    "include": "#type-modifier-extended-scope"
                },
                {
                    "match": "\\b([A-Z]\\w*)\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.struct"
                        }
                    }
                },
                {
                    "include": "#variable"
                },
                {
                    "include": "#punctuation"
                },
                {
                    "include": "#comment"
                }
            ]
        },
        "declaration-function": {
            "patterns": [
                {
                    "begin": "\\b(function)\\s+([A-Za-z_\\d])\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.function"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    },
                    "end": "(?=\\{|;)",
                    "patterns": [
                        {
                            "include": "#natspec"
                        },
                        {
                            "include": "#global"
                        },
                        {
                            "include": "#declaration-function-parameters"
                        },
                        {
                            "include": "#type-modifier-access"
                        },
                        {
                            "include": "#type-modifier-payable"
                        },
                        {
                            "include": "#type-modifier-immutable"
                        },
                        {
                            "include": "#type-modifier-extended-scope"
                        },
                        {
                            "include": "#control-flow"
                        },
                        {
                            "include": "#function-call"
                        },
                        {
                            "include": "#modifier-call"
                        },
                        {
                            "include": "#punctuation"
                        }
                    ]
                },
                {
                    "match": "\\b(function)\\s+([A-Za-z_\\d]\\w*)\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.function"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\.(get|set|reset|push|pop)\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.function"
                        }
                    }
                },
                {
                    "match": "([\\w]+)(\\()a\\, b(\\))",
                    "captures": {
                        "1": {
                            "name": "storage.type.function"
                        },
                        "2": {
                            "name": "punctuation.parameters.begin"
                        },
                        "3": {
                            "name": "punctuation.parameters.end"
                        }
                    }
                }
            ]
        },
        "declaration-modifier": {
            "patterns": [
                {
                    "begin": "\\b(modifier)\\s+(\\w+)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.function"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    },
                    "end": "(?=\\{|;)",
                    "patterns": [
                        {
                            "include": "#natspec"
                        },
                        {
                            "include": "#global"
                        },
                        {
                            "include": "#declaration-function-parameters"
                        },
                        {
                            "include": "#type-modifier-access"
                        },
                        {
                            "include": "#type-modifier-payable"
                        },
                        {
                            "include": "#type-modifier-immutable"
                        },
                        {
                            "include": "#type-modifier-extended-scope"
                        },
                        {
                            "include": "#control-flow"
                        },
                        {
                            "include": "#function-call"
                        },
                        {
                            "include": "#modifier-call"
                        },
                        {
                            "include": "#punctuation"
                        }
                    ]
                }
            ]
        },
        "declaration-storage-mapping": {
            "patterns": [
                {
                    "begin": "\\b(mapping)\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.mapping"
                        }
                    },
                    "end": "(?=\\))",
                    "patterns": [
                        {
                            "include": "#declaration-storage-mapping"
                        },
                        {
                            "include": "#type-primitive"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#operator"
                        }
                    ]
                },
                {
                    "match": "\\b(mapping)\\b",
                    "name": "storage.type.mapping"
                }
            ]
        },
        "declaration-debot-interface": {
            "patterns": [
                {
                    "match": "\\b(SigningBoxInput|NumberInput|AddressInput|AmountInput|ConfirmInput|CountryInput)\\.(get)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(Base64|Hex)\\.(encode|decode)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(DateTimeInput)\\.(getTime|getDate|getDateTime|getTimeZoneOffset)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(Json)\\.(deserialize)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(Menu)\\.(select)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(Network)\\.(get|post)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(EncryptionBoxInput)\\.(getNaclSecretBox|getNaclBox|getChaCha20Box|remove|getSupportedAlgorithms)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(QRCode)\\.(read|draw)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(Query)\\.(collection)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(QueryCollection|SortDirection|QueryStatus)\\.(Ascending|Descending|Messages|Accounts|Transactions|Success|FilterError|NetworkError|UnknownError)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.enum"
                        },
                        "2": {
                            "name": "variable.other.enummember"
                        }
                    }
                },
                {
                    "match": "\\b(Sdk)\\.(getBalance|getAccountType|getAccountCodeHash|encrypt|decrypt|signHash|genRandom|substring|mnemonicFromRandom|mnemonicVerify|mnemonicDeriveSignKeys|hdkeyXprvFromMnemonic|hdkeyDeriveFromXprv|hdkeyDeriveFromXprvPath|hdkeySecretFromXprv|hdkeyPublicFromXprv|naclSignKeypairFromSecretKey|naclBox|naclBoxOpen|naclKeypairFromSecret|chacha20)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(SecurityCardManagement)\\.(getBlockHashes|turnOnWallet|setRecoveryData|getRecoveryData|getSerialNumber|getTonWalletAppletState|createKeyForHmac|deleteCard|getCardList|isCardExists)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(Terminal)\\.(input|print|printf)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(UserInfo)\\.(getAccount|getPublicKey|getSigningBox)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(Media)\\.(output)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(MediaStatus)\\.(Success|UnsupportedMediaType|InvalidDataScheme)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.enum"
                        },
                        "2": {
                            "name": "entity.name.enum"
                        }
                    }
                },
                {
                    "match": "\\b(AddressInput|AmountInput|Base64|ConfirmInput|CountryInput|DateTimeInput|EncryptionBoxInput|Hex|JsonDeserialize|Media|Menu|Network|NumberInput|QRCode|Query|Sdk|SecurityCardManagement|SigningBoxInput|Terminal|UserInfo)\\.(ID)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.interface"
                        },
                        "2": {
                            "name": "constant.numeric.hexadecimal"
                        }
                    }
                }
            ]
        },
        "declaration-error": {
            "match": "\\b(error)(\\s+([A-Za-z_\\d]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.error"
                },
                "3": {
                    "name": "entity.name.error"
                }
            }
        },
        "function-type": {
            "match": "\\b(function)\\b\\s*(\\()(\\))",
            "captures": {
                "1": {
                    "name": "support.type.primitive"
                },
                "2": {
                    "name": "punctuation.parameters.begin"
                },
                "3": {
                    "name": "punctuation.parameters.end"
                }
            }
        },
        "function-call": {
            "match": "\\b([A-Za-z_\\d]+)\\b\\s*(\\()",
            "captures": {
                "1": {
                    "name": "entity.name.function"
                },
                "2": {
                    "name": "punctuation.parameters.begin"
                }
            }
        },
        "assembly": {
            "patterns": [
                {
                    "match": "\\b(assembly)\\b",
                    "name": "keyword.control.assembly"
                },
                {
                    "match": "\\b(let)\\b",
                    "name": "storage.type.assembly"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "match": ";",
                    "name": "punctuation.terminator.statement"
                },
                {
                    "match": "\\.",
                    "name": "punctuation.accessor"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator"
                },
                {
                    "match": "\\{",
                    "name": "punctuation.brace.curly.begin"
                },
                {
                    "match": "\\}",
                    "name": "punctuation.brace.curly.end"
                },
                {
                    "match": "\\[",
                    "name": "punctuation.brace.square.begin"
                },
                {
                    "match": "\\]",
                    "name": "punctuation.brace.square.end"
                },
                {
                    "match": "\\(",
                    "name": "punctuation.parameters.begin"
                },
                {
                    "match": "\\)",
                    "name": "punctuation.parameters.end"
                }
            ]
        }
    },
    "scopeName": "source.ton-solidity",
    "uuid": "ad87d2cd-8575-4afe-984e-9421a3788933"
}